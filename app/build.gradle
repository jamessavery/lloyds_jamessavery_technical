plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.paparazzi)

    id("kotlin-kapt")
    id("com.google.dagger.hilt.android")
}

android {
    namespace 'com.example.lloyds_jamessavery_technical'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.lloyds_jamessavery_technical"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.lloyds_jamessavery_technical.CustomTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    testOptions {
        unitTests.all {
            reports {
                html.required = true
                junitXml.required = true
            }
        }
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

kapt {
    correctErrorTypes true
}

dependencies {

    // Core
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation libs.androidx.material3
    implementation libs.androidx.monitor
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    implementation("io.coil-kt:coil-compose:2.7.0")
    testImplementation("io.coil-kt:coil-test:2.7.0")

    implementation ("androidx.lifecycle:lifecycle-runtime-compose:2.8.5")
    testImplementation("io.mockk:mockk:1.13.5")
    testImplementation("androidx.arch.core:core-testing:2.1.0")
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.2"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'

    testImplementation "app.cash.paparazzi:paparazzi:1.3.1"

    // Navigation
    implementation "androidx.navigation:navigation-compose:2.8.0"

    // Hilt
    implementation("com.google.dagger:hilt-android:2.51.1")
    implementation("androidx.hilt:hilt-navigation-compose:1.2.0")
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.46.1")
    kapt("com.google.dagger:hilt-compiler:2.51.1")
    kaptTest("com.google.dagger:hilt-android-compiler:2.51.1")
    kapt("androidx.hilt:hilt-compiler:1.2.0")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.51.1")

    // Material
    implementation("androidx.compose.material:material:1.6.8")

    // Retrofit & OkHttp
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

    // Room
    implementation("androidx.room:room-runtime:2.6.1")
    annotationProcessor("androidx.room:room-compiler:2.6.1")
    kapt("androidx.room:room-compiler:2.6.1")
    implementation("androidx.room:room-ktx:2.6.1")

}

def homeDir = System.getProperty('user.home')
def gradlePath = "${homeDir}/AndroidStudioProjects/lloyds_jamessavery_technical/gradlew"

tasks.register('runSnapshotTests', Exec) {
    group = 'verification'
    description = 'Runs just the snapshot tests'

    commandLine gradlePath, 'verifyPaparazziDebug', '--tests', 'com.example.lloyds_jamessavery_technical.snapshot.*'

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    doLast {
        println standardOutput.toString()
        println errorOutput.toString()
    }
}

tasks.register('runAllTests') {
    dependsOn(tasks.named('runSnapshotTests'), tasks.named('test'))
    doLast {
        println "All unit & paparazzi tests completed"
    }
}